
* c++ specific
** sort 
- reverse sort
#+BEGIN_SRC C++
  std::sort(begin, end, std::greater<int>())
#+END_SRC
- sort custom struct
#+BEGIN_SRC C++
  struct Meeting{
      int start, end;
      int nth;
  };
  bool operator < (const Meeting& a, const Meeting& b){
      if (a.end != b.end) {
          return a.end < b.end;
      }    
      return a.start < a.start;
  } 
#+END_SRC
- quick sort
#+BEGIN_SRC c++
void qsort(int* arr, int left, int right){
    int pivot = arr[(left+right)/2];
    int i=left, j=right;
    int tmp;

    while(i<=j){
        while(arr[i]<pivot)
            i++;
        while(arr[j]>pivot)
            j--;
        if (i<=j){
            tmp=arr[i];
            arr[i]=arr[j];
            arr[j]=tmp;
            i++;
            j--;
        }
    }

    if (left<j){
        qsort(arr, left, j);
    }
    if (right>i){
        qsort(arr, i, right);
    }
}
#+END_SRC
** priority_queue
#+BEGIN_SRC c++
  #include <queue>

  priority_queue<int> pq;
  priority_queue<int, vector<int>, greater<int>> pq_decreasing;
#+END_SRC
* algorithm
** max heap
properties: A[p]>=A[i], left = 2*i+1(0-based idx), right=2*i+2, parent = i/2
- maxHeapify
- buildMaxHeap
- heapSort

priorityqueue using max heap
- heapMaximum
- heapExtractMax
- heapIncreaseKey
- maxHeapInsert

** greedy
** graph
*** dfs
- topological sort : DAG(no cycle)
* samsung strategy
- multiple category : for small N, choose brute force, for large N choose approximation algorithm like greedy.
  .e.g, category 1, N<10 , category 2 N<100, category 3, N<1000
* project G
http://www.glassdoor.com/Interview/Google-Interview-Questions-E9079.htm
http://courses.csail.mit.edu/iap/interview/Hacking_a_Google_Interview_Practice_Questions_Person_B.pdf

bigo notation : http://bigocheatsheet.com/


http://www.reddit.com/search?q=google+interview+phone&restrict_sr=off&sort=relevance&t=all
